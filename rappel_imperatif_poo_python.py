'''Une pile peut √™tre vue comme une liste sur laquelle on a limit√© les acc√®s : 
on ne peut ins√©rer des √©l√©ments qu'√† une seule extr√©mit√©, appel√©e le sommet de la pile, 
on ne peut retirer un √©l√©ment que s'il est au sommet et on ne peut voir un √©l√©ment de la pile 
que s'il est au sommet. Si on a besoin d'acc√©der √† un √©l√©ment qui n'est pas au sommet, 
on doit retirer un par un les √©l√©ments qui sont sur le dessus, en partant du sommet.
En anglais, ce type de structure est appel√© LIFO : Last In, First Out. 
On peut faire une analogie avec une pile d'assiettes : on ne voit que l'assiette qui est au-dessus, on ajoute une nouvelle assiette par le dessus et on ne peut retirer que l'assiette du dessus. Si on a besoin d'acc√©der aux autres assiettes, il faut retirer une par une celles qui sont au-dessus.
La notion de pile est fondamentale en informatique et a de nombreuses applications. 
Mention-nons par exemple :
‚Ä¢ les navigateurs Internet qui utilisent des piles pour le stockage des pages visit√©es 
(l'adresse de chaque nouvelle page visit√©e est empil√©e et quand on clique sur ¬´pr√©c√©dente ¬ª
ou ¬´reculer d'une page ¬ªon la d√©pile) ;
- la notation polonaise post-fix√©e ;
- la fonction ¬´annuler la frappe¬ª des traitements de texte :chaque nouvelle action est
empil√©e, puis d√©pil√©e lorsqu'on annule la frappe ;
- les fonctions r√©cursives
============================Exercice 1:Compl√©ter le code de la classe Pile
'''

'''A stack can be seen as a list on which access is restricted: 
elements can only be inserted at one end, called the top of the stack, 
you can only remove an element if it is at the top, and you can only see an element in the stack 
only if it's at the top. If you need to access an element that is not at the top, 
you have to remove the elements on top one by one, starting from the top.
In English, this type of structure is called LIFO: Last In, First Out. 
An analogy can be made with a stack of plates: you can only see the plate on top, you add a new plate from above, and you can only remove the plate on top. If you need to access the other plates, you have to remove the ones on top one by one.
The notion of stack is fundamental to computing and has many applications. 
For example
- Internet browsers, which use stacks to store visited pages 
(the address of each new page visited is stacked, and when you click on ‚Äúprevious
or ‚Äúback one page‚Äù to unstack it);
- post-fixed Polish notation;
- the ‚Äúundo typing‚Äù function in word-processing programs: each new action is
then unstacked when the keystroke is cancelled;
- recursive functions
============================Exercise 1:Complete the code for the Stack class
'''

class Pile(object):
    def __init__(self, lst):
        """
        Initialise la pile avec une liste.        
        :param lst: Liste des √©l√©ments qui seront convertis en pile.
        """
        pass        
    
    def __repr__(self):
        """
        Fournit une repr√©sentation en cha√Æne de la pile du sommet vers le bas.
        
        :return: Une cha√Æne de caract√®res repr√©sentant la pile avec les √©l√©ments 
        du sommet vers le bas. Par exemple pour afficher la pile 2,3,5:
        Sommet
        ||2||
        ||3||
        ||5||
         Bas        
        """
        pass
        
    
    def empiler(self, e):
        """
        Ajoute un √©l√©ment au sommet de la pile.        
        :param e: √âl√©ment √† empiler.
        """
        pass
       
    
    def depiler(self):
        """
        Retire l'√©l√©ment au sommet de la pile et le retourne.        
        :return: L'√©l√©ment qui √©tait au sommet de la pile.
        """
        pass
       
    
    def sommet(self):
        """
        Retourne l'√©l√©ment au sommet de la pile sans le retirer.        
        :return: L'√©l√©ment au sommet de la pile.
        """
        return self.lst[0]
        # pass

    def est_pile_vide(self):
        """
        V√©rifie si la pile est vide.        
        :return: True si la pile est vide, False sinon.
        """
        if len(self.lst) == 0:
            return True
        else:
            return False
        # pass
    
    def hauteur(self):
        """
        Retourne le nombre d'√©l√©ments dans la pile.        
        :return: La hauteur de la pile.
        """
        hauteur = len(self.lst)
        return hauteur
        # pass
# __________________________________________________________________ STOP and Test the above üõë _______________________________________________
'''
Exercice 2- Expressions bien parenth√©s√©es
On veut construire √† l'aide d'une pile un v√©rificateur de parenth√©sage. 
D√©finir une fonction parenthesage, qui prend en argument une cha√Æne de caract√®res contenant
une expression parenth√©s√©e et la parcourt de gauche √† droite de la fa√ßon suivante : 
lorsqu'on rencontre une parenth√®se (ou accolade ou crochet) ouvrant(e) on empile la fermeture 
correspondante; lorsqu'on arrive sur une fermeture, lorsque c'est possible, on d√©pile et 
on compare le fermant trouv√© et l'√©l√©ment que l'on vient de d√©piler.
La fonction renvoie True si l'expression est bien parenth√©s√©e, sinon False
Par exemple:
print('Bien Parenth√©s√©e? ', parenthage("(([{}])")) 
    affiche: False car Il y a un ouvrant de trop.
print('Bien Parenth√©s√©e? ', parenthage("(([{]}))"))
    affiche: False car Un fermant ferme un ouvrant qui ne lui correspond pas.
'''
def parenthesage(expr):
    # les fermants sont rang√©s dans le m√™me ordre que les ouvrants
    ouv, fer =  ['(','[','('], [')',']', '}'] 
    pass

'''
Exrecice 3: Notation Polonaise
La notation polonaise, ou encore notation post-fix√©e, consiste √† faire pr√©c√©der les op√©randes 
des op√©rateurs. Par exemple, au lieu d'√©crire 42 + 13, en notation polonaise on √©crit 42 13 +.
Un des avantages de cette notation est qu'elle rend inutile l'usage des parenth√®ses : 
pour 3 x (42 + 13) - 5,on note 3 42 13 + x 5 - et il n'y a aucune ambigu√Øt√©.
Dans cet exercice, on va d√©finir une fonction polonaise qui prendra en argument une expression 
post-fix√©e sous la forme d'une liste de cha√Ænes de caract√®res
(['3','42','13', '*', **', '5','-'] pour l'exemple pr√©c√©dent) et renverra le r√©sultat de 
l'√©valuation de cette expression. 
On lit les √©l√©ments de la liste un par un et on les empile sur une pile initialement vide. 
√Ä chaque fois qu'on rencontre un op√©rateur, plut√¥t que de l'empiler, on l'applique aux deux 
derniers √©l√©ments de la pile et le r√©sultat remplace ces deux derniers √©l√©ments.

1. Cr√©er une fonction est_operateur qui prend une cha√Æne de caract√®res en argument et renvoie 
True si cete cha√Æne est '+', '*', '/' ou '-', False sinon.

2. Cr√©er une fonction calcul qui prend en arguments des cha√Ænes de caract√®res repr√©sentant 
un op√©rateur op et deux op√©randes a et b et renvoie la valeur de a op b

3 En utilisant les deux fonctions pr√©c√©dentes, d√©finir la fonction polonaise
'''
def est_operateur(c):
    '''fonction bool√©nne permettant de savoir si une cha√Æne de caract√®res est un op√©rateur'''
    pass

def calcul(op,a,b):
    pass

def polonaise(exp):
    pass

if __name__ == "__main__":
    
    pile = Pile([])
    # print(pile)
    # pile.empiler(-5)
    # pile.empiler(-8)
    print(pile)
    print(f"Pile est vide? {pile.est_pile_vide()}")
    print(f"Hauteur de pile: {pile.hauteur()}")
    # print(f"Sommet: {pile.depiler()}")
    
    # print('Bien Parenth√©s√©e? ', parenthesage("(([{]}))"))
    
    exp = ['3','42','13', '+', '*', '5','-']
    # print(f"{exp} = {polonaise(exp)}")
       

    
